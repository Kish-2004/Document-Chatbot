package com.example.chatbot.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.http.MediaType;
import org.springframework.http.HttpHeaders; // Import HttpHeaders

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.IOException;

@Service
public class AiIntegrationService {

    @Value("${google.ai.api.key}")
    private String googleAiApiKey;

    private final WebClient webClient;
    private final ObjectMapper objectMapper;

    public AiIntegrationService(WebClient.Builder webClientBuilder) {
        // Base URL for the Generative Language API
        this.webClient = webClientBuilder.baseUrl("https://generativelanguage.googleapis.com").build();
        this.objectMapper = new ObjectMapper();
    }

    /**
     * Generates a response from the Google Gemini 2.0 Flash model using direct HTTP POST.
     * This method utilizes your API key in the X-goog-api-key header.
     *
     * @param prompt The text prompt to send to the Gemini model.
     * @return The generated text response from the model.
     */
    public String getGeminiResponse(String prompt) {
        if (googleAiApiKey == null || googleAiApiKey.isEmpty()) {
            System.err.println("Google AI API Key is not configured in application.properties.");
            return "Error: AI service not configured.";
        }

        // Construct the request body as a JSON string for the Gemini API
        ObjectNode rootNode = objectMapper.createObjectNode();
        ArrayNode contentsArray = rootNode.putArray("contents");
        ObjectNode contentNode = contentsArray.addObject();
        ArrayNode partsArray = contentNode.putArray("parts");
        partsArray.addObject().put("text", prompt);

        String requestBodyJson = rootNode.toString();

        try {

            String responseBody = webClient.post()
                    .uri("/v1beta/models/gemini-2.0-flash:generateContent")
                    .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                    .header("X-goog-api-key", googleAiApiKey)
                    .bodyValue(requestBodyJson)
                    .retrieve()
                    .bodyToMono(String.class)
                    .block();


            JsonNode responseJson = objectMapper.readTree(responseBody);
            JsonNode candidates = responseJson.path("candidates");
            if (candidates.isArray() && candidates.size() > 0) {
                JsonNode firstCandidate = candidates.get(0);
                // Check for 'parts' in the content node to get the text
                JsonNode content = firstCandidate.path("content");
                JsonNode parts = content.path("parts");
                if (parts.isArray() && parts.size() > 0) {
                    JsonNode textPart = parts.get(0);
                    return textPart.path("text").asText();
                }
            }
            return "No text generated by AI (empty or unexpected response format).";

        } catch (Exception e) {
            System.err.println("Error calling Gemini API: " + e.getMessage());
            e.printStackTrace();
            return "Error generating AI response: " + e.getMessage();
        }
    }

    public java.util.List<Double> generateEmbedding(String text) {
        System.out.println("Conceptual call to generate embedding for: " + text);
        return java.util.Collections.emptyList();
    }
}